/*
 * Pamaldeep Singh Dhillon
 * NextPiecePanel.java
 * 
 * TCSS 305 - Autumn 2015
 * Assignment 6 - Tetris
 */
package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.AbstractPiece;
import model.Block;
import model.Board;

/**
 * Panel which shows the next piece that will be in play.
 * 
 * @author Pamaldeep Dhillon
 * @version 2 December 2015
 */
public class NextPiecePanel extends JPanel implements Observer {
    /** A generated serialization ID. */
    private static final long serialVersionUID = 168426035370641970L;
    /** Size for each block in the next piece. */
    private static final int BLOCK_SIZE = 20;
    /** Width of the panel. */
    private static final int PANEL_WIDTH = 120;
    /** Height of the panel. */
    private static final int PANEL_HEIGHT = 120;
    /** Offset for the Next Piece string. */
    private static final int OFFSET = 20;
    /** Board on which this game will be played. */
    private final Board myBoard;
    /** Color of the next piece. */
    private Color myColor;
    /** */
    private boolean myGameStarted;
    
    /**
     * Constructor for the NextPiecePanel.
     * 
     * @param theBoard Board on which game is played.
     */
    public NextPiecePanel(final Board theBoard) {
        super();
        myBoard = theBoard;
        myGameStarted = false;
        setBackground(Color.DARK_GRAY);
        setPreferredSize(new Dimension(PANEL_WIDTH, PANEL_HEIGHT));
    }
    
    /**
     * 
     */
    public void displayNextPiece() {
        myGameStarted = true;
    }
    
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        
        //Draw NEXT PIECE string
        g2d.setFont(new Font("TimesRoman", Font.PLAIN, BLOCK_SIZE));
        g2d.setColor(Color.WHITE);
        g2d.drawString("NEXT PIECE: ", 2, OFFSET);
        
        //Draw next piece
        if (myGameStarted) {
            final AbstractPiece nextPiece = (AbstractPiece) myBoard.getNextPiece();
            setColor(nextPiece.getBlock());
            g2d.setColor(myColor);
            final int[][] pCoords = nextPiece.getRotation();
            for (int i = 0; i < pCoords.length; i++) {
                g2d.fillRect(pCoords[i][0] * BLOCK_SIZE + OFFSET,
                             (PANEL_WIDTH - OFFSET) - pCoords[i][1] * BLOCK_SIZE,
                             BLOCK_SIZE, BLOCK_SIZE);
            }
        }
    }
    
    /**
     * Sets the color for the graphics based on the block. I blocks are cyan, J blocks are
     * blue, L blocks are orange, O blocks are yellow, S blocks are green, T blocks are
     * magenta and Z blocks are red.
     * 
     * @param theBlock Block that will decide the color to be used by paintComponent.
     */
    private void setColor(final Block theBlock) {
        if (theBlock == Block.I) {
            myColor = Color.CYAN;
        } else if (theBlock == Block.J) {
            myColor = Color.BLUE;
        } else if (theBlock == Block.L) {
            myColor = Color.ORANGE;
        } else if (theBlock == Block.O) {
            myColor = Color.YELLOW;
        } else if (theBlock == Block.S) {
            myColor = Color.GREEN;
        } else if (theBlock == Block.T) {
            myColor = Color.MAGENTA;
        } else if (theBlock == Block.Z) {
            myColor = Color.RED;
        }
    }

    @Override
    public void update(final Observable theObservable, final Object theArg) {
        repaint();
    }

}
