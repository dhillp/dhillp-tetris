/**
 * 
 */
package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.AbstractPiece;
import model.Block;
import model.Board;

/**
 * @author Pamaldeep
 * @version 1 December 2015
 */
public final class TetrisPanel extends JPanel implements Observer {
    /** */
    private static final long serialVersionUID = -7778642252688582633L;
    /** */
    private static final int PANEL_WIDTH = 200;
    /** */
    private static final int PANEL_HEIGHT = 400;
    /** */
    private static final int BLOCK_SIZE = 20;
    /** */
    private static final int ROW_SIZE = 10;
    /** */
    private static final int FONT_SIZE = 30;
    /** */
    private static final int MESSAGE_OFFSET = 10;
    /** */
    private static final int GRID_SPACING = 20;
    /** */
    private final Board myBoard;
    /** */
    private Color myColor;
    /**
     * 
     * @param theBoard a
     */
    public TetrisPanel(final Board theBoard) {
        super();
        myBoard = theBoard;
        setPreferredSize(new Dimension(PANEL_WIDTH, PANEL_HEIGHT + BLOCK_SIZE));
        setBackground(Color.BLACK);
    }
    
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setPaint(Color.BLUE);
        g2d.setStroke(new BasicStroke(1));
        for (int i = 0; i < getWidth(); i += GRID_SPACING) {
            g2d.drawLine(i, 0, i, getHeight());
        }
        for (int j = 0; j < getHeight(); j += GRID_SPACING) {
            g2d.drawLine(0, j, getWidth(), j);
        }
        final AbstractPiece currentPiece = (AbstractPiece) myBoard.getCurrentPiece();
        setColor(currentPiece.getBlock());
        g2d.setColor(myColor);
        final int[][] pCoords = currentPiece.getBoardCoordinates();
        for (int i = 0; i < pCoords.length; i++) {
            g2d.fillRect(pCoords[i][0] * BLOCK_SIZE, PANEL_HEIGHT - pCoords[i][1] * BLOCK_SIZE,
                         BLOCK_SIZE, BLOCK_SIZE);
        }
        final List<Block[]> frozen = myBoard.getFrozenBlocks();
        for (int j = 0; j < frozen.size(); j++) {
            for (int k = 0; k < ROW_SIZE; k++) {
                if (frozen.get(j)[k] != Block.EMPTY) {
                    setColor(frozen.get(j)[k]);
                    g2d.setColor(myColor);
                    g2d.fillRect(k * BLOCK_SIZE, PANEL_HEIGHT - j * BLOCK_SIZE, BLOCK_SIZE,
                                 BLOCK_SIZE);
                }
            }
        }
        if (myBoard.isGameOver()) {
            g2d.setColor(Color.GRAY);
            g2d.setFont(new Font("TimesRoman", Font.PLAIN, FONT_SIZE));
            g2d.drawString("GAME OVER", MESSAGE_OFFSET, PANEL_WIDTH);
        }
    }
    
    /**
     * 
     * @param theBlock a
     */
    private void setColor(final Block theBlock) {
        if (theBlock == Block.I) {
            myColor = Color.CYAN;
        } else if (theBlock == Block.J) {
            myColor = Color.BLUE;
        } else if (theBlock == Block.L) {
            myColor = Color.ORANGE;
        } else if (theBlock == Block.O) {
            myColor = Color.YELLOW;
        } else if (theBlock == Block.S) {
            myColor = Color.GREEN;
        } else if (theBlock == Block.T) {
            myColor = Color.MAGENTA;
        } else if (theBlock == Block.Z) {
            myColor = Color.RED;
        }
    }

    @Override
    public void update(final Observable theObservable, final Object theArg) {
        repaint();
    }
}
