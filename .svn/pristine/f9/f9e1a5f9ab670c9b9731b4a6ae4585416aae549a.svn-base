/**
 * 
 */
package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.AbstractPiece;
import model.Block;
import model.Board;

/**
 * @author Pamaldeep
 * @version 1 December 2015
 */
public class NextPiecePanel extends JPanel implements Observer {
    /** */
    private static final long serialVersionUID = 168426035370641970L;
    /** */
    private static final int BLOCK_SIZE = 20;
    /** */
    private static final int PANEL_WIDTH = 120;
    /** */
    private static final int PANEL_HEIGHT = 210;
    /** */
    private static final int OFFCENTER = 20;
    /** */
    private final Board myBoard;
    /** */
    private Color myColor;
    
    /**
     * 
     * @param theBoard a
     */
    public NextPiecePanel(final Board theBoard) {
        super();
        myBoard = theBoard;
        setBackground(Color.DARK_GRAY);
        setPreferredSize(new Dimension(PANEL_WIDTH, PANEL_HEIGHT));
    }
    
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setFont(new Font("TimesRoman", Font.PLAIN, BLOCK_SIZE));
        g2d.setColor(Color.WHITE);
        g2d.drawString("NEXT PIECE: ", 0, OFFCENTER);
        final AbstractPiece nextPiece = (AbstractPiece) myBoard.getNextPiece();
        setColor(nextPiece.getBlock());
        g2d.setColor(myColor);
        final int[][] pCoords = nextPiece.getRotation();
        for (int i = 0; i < pCoords.length; i++) {
            g2d.fillRect(pCoords[i][0] * BLOCK_SIZE + OFFCENTER,
                         (PANEL_WIDTH - OFFCENTER) - pCoords[i][1] * BLOCK_SIZE,
                         BLOCK_SIZE, BLOCK_SIZE);
        }
    }
    
    /**
     * 
     * @param theBlock a
     */
    private void setColor(final Block theBlock) {
        if (theBlock == Block.I) {
            myColor = Color.CYAN;
        } else if (theBlock == Block.J) {
            myColor = Color.BLUE;
        } else if (theBlock == Block.L) {
            myColor = Color.ORANGE;
        } else if (theBlock == Block.O) {
            myColor = Color.YELLOW;
        } else if (theBlock == Block.S) {
            myColor = Color.GREEN;
        } else if (theBlock == Block.T) {
            myColor = Color.MAGENTA;
        } else if (theBlock == Block.Z) {
            myColor = Color.RED;
        }
    }

    @Override
    public void update(final Observable theObservable, final Object theArg) {
        repaint();
    }

}
